class Butterfly {

    field int column;
    field int row;
    field int currentPosition;
    field boolean movingRight;

    constructor Butterfly new(int startColumn, int startRow) {
        let column = startColumn;
        let movingRight = true;
        let row = startRow;
        let currentPosition = (row * 32) + column;

        do draw();
        return this;
    }

    method void move() {
        do clear();  // Borra la posición actual

        // Movimiento horizontal
        if (movingRight) {
            if (column < 30) {  // Límite derecho (dejando espacio para el objeto)
                let column = column + 1;  // Mueve a la derecha
            } else {
                let movingRight = false;  // Cambia dirección al llegar al borde derecho
            }
        } else {
            if (column > 0) {  // Límite izquierdo
                let column = column - 1;  // Mueve a la izquierda
            } else {
                let movingRight = true;  // Cambia dirección al llegar al borde izquierdo
            }
        }

        let currentPosition = (row * 32) + column;
        do draw();  // Dibuja en la nueva posición
        return;
    }

    method void draw() {
        var int memAddress; 
        let memAddress = 16384+currentPosition;

        do Memory.poke(memAddress, 6144);
        do Memory.poke(memAddress +32, 6144);
        do Memory.poke(memAddress +64, 6144);
        do Memory.poke(memAddress +96, -1537);
        do Memory.poke(memAddress +128, -15361);
        do Memory.poke(memAddress +160, -14337);
        do Memory.poke(memAddress +192, -12289);
        do Memory.poke(memAddress +224, -8193);
        do Memory.poke(memAddress +256, -1);
        do Memory.poke(memAddress +288, -1);
        do Memory.poke(memAddress +320, -1);
        do Memory.poke(memAddress +352, -4);
        do Memory.poke(memAddress +384, -4);
        do Memory.poke(memAddress +416, -16);
        do Memory.poke(memAddress +448, -64);
        do Memory.poke(memAddress +480, -256);
        do Memory.poke(memAddress +512, -256);
        do Memory.poke(memAddress +544, -64);
        do Memory.poke(memAddress +576, -16);
        do Memory.poke(memAddress +608, -4);
        do Memory.poke(memAddress +640, -4);
        do Memory.poke(memAddress +672, -4);
        do Memory.poke(memAddress +704, -4);
        do Memory.poke(memAddress +736, -12296);
        do Memory.poke(memAddress +768, -12320);
        do Memory.poke(memAddress +800, -15488);
        do Memory.poke(memAddress +832, -16384);
        do Memory.poke(memAddress +864, -16384);
   
        do Memory.poke(memAddress +1, 6);
        do Memory.poke(memAddress +33, 6);
        do Memory.poke(memAddress +65, 6);
        do Memory.poke(memAddress +97, 16359);
        do Memory.poke(memAddress +129, 16368);
        do Memory.poke(memAddress +161, 16376);
        do Memory.poke(memAddress +193, 16380);
        do Memory.poke(memAddress +225, 16382);
        do Memory.poke(memAddress +257, 16383);
        do Memory.poke(memAddress +289, 16383);
        do Memory.poke(memAddress +321, 16383);
        do Memory.poke(memAddress +353, 4095);
        do Memory.poke(memAddress +385, 4095);
        do Memory.poke(memAddress +417, 1023);
        do Memory.poke(memAddress +449, 255);
        do Memory.poke(memAddress +481, 63);
        do Memory.poke(memAddress +513, 63);
        do Memory.poke(memAddress +545, 255);
        do Memory.poke(memAddress +577, 1023);
        do Memory.poke(memAddress +609, 4095);
        do Memory.poke(memAddress +641, 4095);
        do Memory.poke(memAddress +673, 4095);
        do Memory.poke(memAddress +705, 4095);
        do Memory.poke(memAddress +737, 2044);
        do Memory.poke(memAddress +769, 508);
        do Memory.poke(memAddress +801, 112);

        return;
    }

    method void clear() {
        var int memAddress; 
        let memAddress = 16384 + currentPosition;
        
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        do Memory.poke(memAddress + 512, 0);
        do Memory.poke(memAddress + 544, 0);
        do Memory.poke(memAddress + 576, 0);
        do Memory.poke(memAddress + 608, 0);
        do Memory.poke(memAddress + 640, 0);
        do Memory.poke(memAddress + 672, 0);
        do Memory.poke(memAddress + 704, 0);
        do Memory.poke(memAddress + 736, 0);
        do Memory.poke(memAddress + 768, 0);
        do Memory.poke(memAddress + 800, 0);
        do Memory.poke(memAddress + 832, 0);
        do Memory.poke(memAddress + 864, 0);

        do Memory.poke(memAddress + 1, 0);
        do Memory.poke(memAddress + 33, 0);
        do Memory.poke(memAddress + 65, 0);
        do Memory.poke(memAddress + 97, 0);
        do Memory.poke(memAddress + 129, 0);
        do Memory.poke(memAddress + 161, 0);
        do Memory.poke(memAddress + 193, 0);
        do Memory.poke(memAddress + 225, 0);
        do Memory.poke(memAddress + 257, 0);
        do Memory.poke(memAddress + 289, 0);
        do Memory.poke(memAddress + 321, 0);
        do Memory.poke(memAddress + 353, 0);
        do Memory.poke(memAddress + 385, 0);
        do Memory.poke(memAddress + 417, 0);
        do Memory.poke(memAddress + 449, 0);
        do Memory.poke(memAddress + 481, 0);
        do Memory.poke(memAddress + 513, 0);
        do Memory.poke(memAddress + 545, 0);
        do Memory.poke(memAddress + 577, 0);
        do Memory.poke(memAddress + 609, 0);
        do Memory.poke(memAddress + 641, 0);
        do Memory.poke(memAddress + 673, 0);
        do Memory.poke(memAddress + 705, 0);
        do Memory.poke(memAddress + 737, 0);
        do Memory.poke(memAddress + 769, 0);
        do Memory.poke(memAddress + 801, 0);

        return;
    }

    method int getY() {
        return row;
    }

    method int getCenterX() {
    return (column * 16) + 12;
    }
}
